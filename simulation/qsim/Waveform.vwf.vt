// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/06/2025 15:12:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Neander
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Neander_vlg_sample_tst(
	clk_placa,
	reset,
	seletor,
	step_up,
	sampler_tx
);
input  clk_placa;
input  reset;
input  seletor;
input  step_up;
output sampler_tx;

reg sample;
time current_time;
always @(clk_placa or reset or seletor or step_up)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Neander_vlg_check_tst (
	Acc,
	accD,
	accU,
	HLT,
	N,
	pc,
	pcD,
	pcU,
	Z,
	sampler_rx
);
input [7:0] Acc;
input [6:0] accD;
input [6:0] accU;
input  HLT;
input  N;
input [7:0] pc;
input [6:0] pcD;
input [6:0] pcU;
input  Z;
input sampler_rx;

reg [7:0] Acc_expected;
reg [6:0] accD_expected;
reg [6:0] accU_expected;
reg  HLT_expected;
reg  N_expected;
reg [7:0] pc_expected;
reg [6:0] pcD_expected;
reg [6:0] pcU_expected;
reg  Z_expected;

reg [7:0] Acc_prev;
reg [6:0] accD_prev;
reg [6:0] accU_prev;
reg  HLT_prev;
reg  N_prev;
reg [7:0] pc_prev;
reg [6:0] pcD_prev;
reg [6:0] pcU_prev;
reg  Z_prev;

reg [7:0] Acc_expected_prev;
reg [6:0] accD_expected_prev;
reg [6:0] accU_expected_prev;
reg  HLT_expected_prev;
reg  N_expected_prev;
reg [7:0] pc_expected_prev;
reg [6:0] pcD_expected_prev;
reg [6:0] pcU_expected_prev;
reg  Z_expected_prev;

reg [7:0] last_Acc_exp;
reg [6:0] last_accD_exp;
reg [6:0] last_accU_exp;
reg  last_HLT_exp;
reg  last_N_exp;
reg [7:0] last_pc_exp;
reg [6:0] last_pcD_exp;
reg [6:0] last_pcU_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	Acc_prev = Acc;
	accD_prev = accD;
	accU_prev = accU;
	HLT_prev = HLT;
	N_prev = N;
	pc_prev = pc;
	pcD_prev = pcD;
	pcU_prev = pcU;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	Acc_expected_prev = Acc_expected;
	accD_expected_prev = accD_expected;
	accU_expected_prev = accU_expected;
	HLT_expected_prev = HLT_expected;
	N_expected_prev = N_expected;
	pc_expected_prev = pc_expected;
	pcD_expected_prev = pcD_expected;
	pcU_expected_prev = pcU_expected;
	Z_expected_prev = Z_expected;
end


// expected Acc[ 7 ]
initial
begin
	Acc_expected[7] = 1'bX;
end 
// expected Acc[ 6 ]
initial
begin
	Acc_expected[6] = 1'bX;
end 
// expected Acc[ 5 ]
initial
begin
	Acc_expected[5] = 1'bX;
end 
// expected Acc[ 4 ]
initial
begin
	Acc_expected[4] = 1'bX;
end 
// expected Acc[ 3 ]
initial
begin
	Acc_expected[3] = 1'bX;
end 
// expected Acc[ 2 ]
initial
begin
	Acc_expected[2] = 1'bX;
end 
// expected Acc[ 1 ]
initial
begin
	Acc_expected[1] = 1'bX;
end 
// expected Acc[ 0 ]
initial
begin
	Acc_expected[0] = 1'bX;
end 
// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'bX;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'bX;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'bX;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'bX;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 

// expected HLT
initial
begin
	HLT_expected = 1'bX;
end 
// expected accD[ 6 ]
initial
begin
	accD_expected[6] = 1'bX;
end 
// expected accD[ 5 ]
initial
begin
	accD_expected[5] = 1'bX;
end 
// expected accD[ 4 ]
initial
begin
	accD_expected[4] = 1'bX;
end 
// expected accD[ 3 ]
initial
begin
	accD_expected[3] = 1'bX;
end 
// expected accD[ 2 ]
initial
begin
	accD_expected[2] = 1'bX;
end 
// expected accD[ 1 ]
initial
begin
	accD_expected[1] = 1'bX;
end 
// expected accD[ 0 ]
initial
begin
	accD_expected[0] = 1'bX;
end 
// expected accU[ 6 ]
initial
begin
	accU_expected[6] = 1'bX;
end 
// expected accU[ 5 ]
initial
begin
	accU_expected[5] = 1'bX;
end 
// expected accU[ 4 ]
initial
begin
	accU_expected[4] = 1'bX;
end 
// expected accU[ 3 ]
initial
begin
	accU_expected[3] = 1'bX;
end 
// expected accU[ 2 ]
initial
begin
	accU_expected[2] = 1'bX;
end 
// expected accU[ 1 ]
initial
begin
	accU_expected[1] = 1'bX;
end 
// expected accU[ 0 ]
initial
begin
	accU_expected[0] = 1'bX;
end 
// expected pcD[ 6 ]
initial
begin
	pcD_expected[6] = 1'bX;
end 
// expected pcD[ 5 ]
initial
begin
	pcD_expected[5] = 1'bX;
end 
// expected pcD[ 4 ]
initial
begin
	pcD_expected[4] = 1'bX;
end 
// expected pcD[ 3 ]
initial
begin
	pcD_expected[3] = 1'bX;
end 
// expected pcD[ 2 ]
initial
begin
	pcD_expected[2] = 1'bX;
end 
// expected pcD[ 1 ]
initial
begin
	pcD_expected[1] = 1'bX;
end 
// expected pcD[ 0 ]
initial
begin
	pcD_expected[0] = 1'bX;
end 
// expected pcU[ 6 ]
initial
begin
	pcU_expected[6] = 1'bX;
end 
// expected pcU[ 5 ]
initial
begin
	pcU_expected[5] = 1'bX;
end 
// expected pcU[ 4 ]
initial
begin
	pcU_expected[4] = 1'bX;
end 
// expected pcU[ 3 ]
initial
begin
	pcU_expected[3] = 1'bX;
end 
// expected pcU[ 2 ]
initial
begin
	pcU_expected[2] = 1'bX;
end 
// expected pcU[ 1 ]
initial
begin
	pcU_expected[1] = 1'bX;
end 
// expected pcU[ 0 ]
initial
begin
	pcU_expected[0] = 1'bX;
end 
// generate trigger
always @(Acc_expected or Acc or accD_expected or accD or accU_expected or accU or HLT_expected or HLT or N_expected or N or pc_expected or pc or pcD_expected or pcD or pcU_expected or pcU or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Acc = %b | expected accD = %b | expected accU = %b | expected HLT = %b | expected N = %b | expected pc = %b | expected pcD = %b | expected pcU = %b | expected Z = %b | ",Acc_expected_prev,accD_expected_prev,accU_expected_prev,HLT_expected_prev,N_expected_prev,pc_expected_prev,pcD_expected_prev,pcU_expected_prev,Z_expected_prev);
	$display("| real Acc = %b | real accD = %b | real accU = %b | real HLT = %b | real N = %b | real pc = %b | real pcD = %b | real pcU = %b | real Z = %b | ",Acc_prev,accD_prev,accU_prev,HLT_prev,N_prev,pc_prev,pcD_prev,pcU_prev,Z_prev);
`endif
	if (
		( Acc_expected_prev[0] !== 1'bx ) && ( Acc_prev[0] !== Acc_expected_prev[0] )
		&& ((Acc_expected_prev[0] !== last_Acc_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[0] = Acc_expected_prev[0];
	end
	if (
		( Acc_expected_prev[1] !== 1'bx ) && ( Acc_prev[1] !== Acc_expected_prev[1] )
		&& ((Acc_expected_prev[1] !== last_Acc_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[1] = Acc_expected_prev[1];
	end
	if (
		( Acc_expected_prev[2] !== 1'bx ) && ( Acc_prev[2] !== Acc_expected_prev[2] )
		&& ((Acc_expected_prev[2] !== last_Acc_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[2] = Acc_expected_prev[2];
	end
	if (
		( Acc_expected_prev[3] !== 1'bx ) && ( Acc_prev[3] !== Acc_expected_prev[3] )
		&& ((Acc_expected_prev[3] !== last_Acc_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[3] = Acc_expected_prev[3];
	end
	if (
		( Acc_expected_prev[4] !== 1'bx ) && ( Acc_prev[4] !== Acc_expected_prev[4] )
		&& ((Acc_expected_prev[4] !== last_Acc_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[4] = Acc_expected_prev[4];
	end
	if (
		( Acc_expected_prev[5] !== 1'bx ) && ( Acc_prev[5] !== Acc_expected_prev[5] )
		&& ((Acc_expected_prev[5] !== last_Acc_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[5] = Acc_expected_prev[5];
	end
	if (
		( Acc_expected_prev[6] !== 1'bx ) && ( Acc_prev[6] !== Acc_expected_prev[6] )
		&& ((Acc_expected_prev[6] !== last_Acc_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[6] = Acc_expected_prev[6];
	end
	if (
		( Acc_expected_prev[7] !== 1'bx ) && ( Acc_prev[7] !== Acc_expected_prev[7] )
		&& ((Acc_expected_prev[7] !== last_Acc_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Acc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Acc_expected_prev);
		$display ("     Real value = %b", Acc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Acc_exp[7] = Acc_expected_prev[7];
	end
	if (
		( accD_expected_prev[0] !== 1'bx ) && ( accD_prev[0] !== accD_expected_prev[0] )
		&& ((accD_expected_prev[0] !== last_accD_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accD_expected_prev);
		$display ("     Real value = %b", accD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accD_exp[0] = accD_expected_prev[0];
	end
	if (
		( accD_expected_prev[1] !== 1'bx ) && ( accD_prev[1] !== accD_expected_prev[1] )
		&& ((accD_expected_prev[1] !== last_accD_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accD_expected_prev);
		$display ("     Real value = %b", accD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accD_exp[1] = accD_expected_prev[1];
	end
	if (
		( accD_expected_prev[2] !== 1'bx ) && ( accD_prev[2] !== accD_expected_prev[2] )
		&& ((accD_expected_prev[2] !== last_accD_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accD_expected_prev);
		$display ("     Real value = %b", accD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accD_exp[2] = accD_expected_prev[2];
	end
	if (
		( accD_expected_prev[3] !== 1'bx ) && ( accD_prev[3] !== accD_expected_prev[3] )
		&& ((accD_expected_prev[3] !== last_accD_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accD_expected_prev);
		$display ("     Real value = %b", accD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accD_exp[3] = accD_expected_prev[3];
	end
	if (
		( accD_expected_prev[4] !== 1'bx ) && ( accD_prev[4] !== accD_expected_prev[4] )
		&& ((accD_expected_prev[4] !== last_accD_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accD_expected_prev);
		$display ("     Real value = %b", accD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accD_exp[4] = accD_expected_prev[4];
	end
	if (
		( accD_expected_prev[5] !== 1'bx ) && ( accD_prev[5] !== accD_expected_prev[5] )
		&& ((accD_expected_prev[5] !== last_accD_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accD_expected_prev);
		$display ("     Real value = %b", accD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accD_exp[5] = accD_expected_prev[5];
	end
	if (
		( accD_expected_prev[6] !== 1'bx ) && ( accD_prev[6] !== accD_expected_prev[6] )
		&& ((accD_expected_prev[6] !== last_accD_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accD_expected_prev);
		$display ("     Real value = %b", accD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_accD_exp[6] = accD_expected_prev[6];
	end
	if (
		( accU_expected_prev[0] !== 1'bx ) && ( accU_prev[0] !== accU_expected_prev[0] )
		&& ((accU_expected_prev[0] !== last_accU_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accU_expected_prev);
		$display ("     Real value = %b", accU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_accU_exp[0] = accU_expected_prev[0];
	end
	if (
		( accU_expected_prev[1] !== 1'bx ) && ( accU_prev[1] !== accU_expected_prev[1] )
		&& ((accU_expected_prev[1] !== last_accU_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accU_expected_prev);
		$display ("     Real value = %b", accU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_accU_exp[1] = accU_expected_prev[1];
	end
	if (
		( accU_expected_prev[2] !== 1'bx ) && ( accU_prev[2] !== accU_expected_prev[2] )
		&& ((accU_expected_prev[2] !== last_accU_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accU_expected_prev);
		$display ("     Real value = %b", accU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_accU_exp[2] = accU_expected_prev[2];
	end
	if (
		( accU_expected_prev[3] !== 1'bx ) && ( accU_prev[3] !== accU_expected_prev[3] )
		&& ((accU_expected_prev[3] !== last_accU_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accU_expected_prev);
		$display ("     Real value = %b", accU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_accU_exp[3] = accU_expected_prev[3];
	end
	if (
		( accU_expected_prev[4] !== 1'bx ) && ( accU_prev[4] !== accU_expected_prev[4] )
		&& ((accU_expected_prev[4] !== last_accU_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accU_expected_prev);
		$display ("     Real value = %b", accU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_accU_exp[4] = accU_expected_prev[4];
	end
	if (
		( accU_expected_prev[5] !== 1'bx ) && ( accU_prev[5] !== accU_expected_prev[5] )
		&& ((accU_expected_prev[5] !== last_accU_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accU_expected_prev);
		$display ("     Real value = %b", accU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_accU_exp[5] = accU_expected_prev[5];
	end
	if (
		( accU_expected_prev[6] !== 1'bx ) && ( accU_prev[6] !== accU_expected_prev[6] )
		&& ((accU_expected_prev[6] !== last_accU_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port accU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", accU_expected_prev);
		$display ("     Real value = %b", accU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_accU_exp[6] = accU_expected_prev[6];
	end
	if (
		( HLT_expected_prev !== 1'bx ) && ( HLT_prev !== HLT_expected_prev )
		&& ((HLT_expected_prev !== last_HLT_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HLT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HLT_expected_prev);
		$display ("     Real value = %b", HLT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HLT_exp = HLT_expected_prev;
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end
	if (
		( pcD_expected_prev[0] !== 1'bx ) && ( pcD_prev[0] !== pcD_expected_prev[0] )
		&& ((pcD_expected_prev[0] !== last_pcD_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcD_expected_prev);
		$display ("     Real value = %b", pcD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcD_exp[0] = pcD_expected_prev[0];
	end
	if (
		( pcD_expected_prev[1] !== 1'bx ) && ( pcD_prev[1] !== pcD_expected_prev[1] )
		&& ((pcD_expected_prev[1] !== last_pcD_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcD_expected_prev);
		$display ("     Real value = %b", pcD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcD_exp[1] = pcD_expected_prev[1];
	end
	if (
		( pcD_expected_prev[2] !== 1'bx ) && ( pcD_prev[2] !== pcD_expected_prev[2] )
		&& ((pcD_expected_prev[2] !== last_pcD_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcD_expected_prev);
		$display ("     Real value = %b", pcD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcD_exp[2] = pcD_expected_prev[2];
	end
	if (
		( pcD_expected_prev[3] !== 1'bx ) && ( pcD_prev[3] !== pcD_expected_prev[3] )
		&& ((pcD_expected_prev[3] !== last_pcD_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcD_expected_prev);
		$display ("     Real value = %b", pcD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcD_exp[3] = pcD_expected_prev[3];
	end
	if (
		( pcD_expected_prev[4] !== 1'bx ) && ( pcD_prev[4] !== pcD_expected_prev[4] )
		&& ((pcD_expected_prev[4] !== last_pcD_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcD_expected_prev);
		$display ("     Real value = %b", pcD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcD_exp[4] = pcD_expected_prev[4];
	end
	if (
		( pcD_expected_prev[5] !== 1'bx ) && ( pcD_prev[5] !== pcD_expected_prev[5] )
		&& ((pcD_expected_prev[5] !== last_pcD_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcD_expected_prev);
		$display ("     Real value = %b", pcD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcD_exp[5] = pcD_expected_prev[5];
	end
	if (
		( pcD_expected_prev[6] !== 1'bx ) && ( pcD_prev[6] !== pcD_expected_prev[6] )
		&& ((pcD_expected_prev[6] !== last_pcD_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcD_expected_prev);
		$display ("     Real value = %b", pcD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_pcD_exp[6] = pcD_expected_prev[6];
	end
	if (
		( pcU_expected_prev[0] !== 1'bx ) && ( pcU_prev[0] !== pcU_expected_prev[0] )
		&& ((pcU_expected_prev[0] !== last_pcU_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcU_expected_prev);
		$display ("     Real value = %b", pcU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcU_exp[0] = pcU_expected_prev[0];
	end
	if (
		( pcU_expected_prev[1] !== 1'bx ) && ( pcU_prev[1] !== pcU_expected_prev[1] )
		&& ((pcU_expected_prev[1] !== last_pcU_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcU_expected_prev);
		$display ("     Real value = %b", pcU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcU_exp[1] = pcU_expected_prev[1];
	end
	if (
		( pcU_expected_prev[2] !== 1'bx ) && ( pcU_prev[2] !== pcU_expected_prev[2] )
		&& ((pcU_expected_prev[2] !== last_pcU_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcU_expected_prev);
		$display ("     Real value = %b", pcU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcU_exp[2] = pcU_expected_prev[2];
	end
	if (
		( pcU_expected_prev[3] !== 1'bx ) && ( pcU_prev[3] !== pcU_expected_prev[3] )
		&& ((pcU_expected_prev[3] !== last_pcU_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcU_expected_prev);
		$display ("     Real value = %b", pcU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcU_exp[3] = pcU_expected_prev[3];
	end
	if (
		( pcU_expected_prev[4] !== 1'bx ) && ( pcU_prev[4] !== pcU_expected_prev[4] )
		&& ((pcU_expected_prev[4] !== last_pcU_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcU[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcU_expected_prev);
		$display ("     Real value = %b", pcU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcU_exp[4] = pcU_expected_prev[4];
	end
	if (
		( pcU_expected_prev[5] !== 1'bx ) && ( pcU_prev[5] !== pcU_expected_prev[5] )
		&& ((pcU_expected_prev[5] !== last_pcU_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcU[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcU_expected_prev);
		$display ("     Real value = %b", pcU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcU_exp[5] = pcU_expected_prev[5];
	end
	if (
		( pcU_expected_prev[6] !== 1'bx ) && ( pcU_prev[6] !== pcU_expected_prev[6] )
		&& ((pcU_expected_prev[6] !== last_pcU_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pcU[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pcU_expected_prev);
		$display ("     Real value = %b", pcU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pcU_exp[6] = pcU_expected_prev[6];
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Neander_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_placa;
reg reset;
reg seletor;
reg step_up;
// wires                                               
wire [7:0] Acc;
wire [6:0] accD;
wire [6:0] accU;
wire HLT;
wire N;
wire [7:0] pc;
wire [6:0] pcD;
wire [6:0] pcU;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Neander i1 (
// port map - connection between master ports and signals/registers   
	.Acc(Acc),
	.accD(accD),
	.accU(accU),
	.clk_placa(clk_placa),
	.HLT(HLT),
	.N(N),
	.pc(pc),
	.pcD(pcD),
	.pcU(pcU),
	.reset(reset),
	.seletor(seletor),
	.step_up(step_up),
	.Z(Z)
);

// clk_placa
always
begin
	clk_placa = 1'b0;
	clk_placa = #2000 1'b1;
	#2000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// seletor
initial
begin
	seletor = 1'b0;
end 

// step_up
initial
begin
	step_up = 1'b0;
end 

Neander_vlg_sample_tst tb_sample (
	.clk_placa(clk_placa),
	.reset(reset),
	.seletor(seletor),
	.step_up(step_up),
	.sampler_tx(sampler)
);

Neander_vlg_check_tst tb_out(
	.Acc(Acc),
	.accD(accD),
	.accU(accU),
	.HLT(HLT),
	.N(N),
	.pc(pc),
	.pcD(pcD),
	.pcU(pcU),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

