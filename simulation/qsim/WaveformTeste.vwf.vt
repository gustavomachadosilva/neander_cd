// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/05/2025 15:59:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Neander
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Neander_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Neander_vlg_check_tst (
	S,
	selULA,
	ULA_ADD,
	ULA_AND,
	ULA_NOT,
	ULA_OR,
	ULA_Y,
	sampler_rx
);
input [7:0] S;
input [2:0] selULA;
input  ULA_ADD;
input  ULA_AND;
input  ULA_NOT;
input  ULA_OR;
input  ULA_Y;
input sampler_rx;

reg [7:0] S_expected;
reg [2:0] selULA_expected;
reg  ULA_ADD_expected;
reg  ULA_AND_expected;
reg  ULA_NOT_expected;
reg  ULA_OR_expected;
reg  ULA_Y_expected;

reg [7:0] S_prev;
reg [2:0] selULA_prev;
reg  ULA_ADD_prev;
reg  ULA_AND_prev;
reg  ULA_NOT_prev;
reg  ULA_OR_prev;
reg  ULA_Y_prev;

reg [7:0] S_expected_prev;
reg [2:0] selULA_expected_prev;
reg  ULA_ADD_expected_prev;
reg  ULA_AND_expected_prev;
reg  ULA_NOT_expected_prev;
reg  ULA_OR_expected_prev;
reg  ULA_Y_expected_prev;

reg [7:0] last_S_exp;
reg [2:0] last_selULA_exp;
reg  last_ULA_ADD_exp;
reg  last_ULA_AND_exp;
reg  last_ULA_NOT_exp;
reg  last_ULA_OR_exp;
reg  last_ULA_Y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	S_prev = S;
	selULA_prev = selULA;
	ULA_ADD_prev = ULA_ADD;
	ULA_AND_prev = ULA_AND;
	ULA_NOT_prev = ULA_NOT;
	ULA_OR_prev = ULA_OR;
	ULA_Y_prev = ULA_Y;
end

// update expected /o prevs

always @(trigger)
begin
	S_expected_prev = S_expected;
	selULA_expected_prev = selULA_expected;
	ULA_ADD_expected_prev = ULA_ADD_expected;
	ULA_AND_expected_prev = ULA_AND_expected;
	ULA_NOT_expected_prev = ULA_NOT_expected;
	ULA_OR_expected_prev = ULA_OR_expected;
	ULA_Y_expected_prev = ULA_Y_expected;
end


// expected S[ 7 ]
initial
begin
	S_expected[7] = 1'bX;
end 
// expected S[ 6 ]
initial
begin
	S_expected[6] = 1'bX;
end 
// expected S[ 5 ]
initial
begin
	S_expected[5] = 1'bX;
end 
// expected S[ 4 ]
initial
begin
	S_expected[4] = 1'bX;
end 
// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 
// expected selULA[ 2 ]
initial
begin
	selULA_expected[2] = 1'bX;
end 
// expected selULA[ 1 ]
initial
begin
	selULA_expected[1] = 1'bX;
end 
// expected selULA[ 0 ]
initial
begin
	selULA_expected[0] = 1'bX;
end 

// expected ULA_ADD
initial
begin
	ULA_ADD_expected = 1'bX;
end 

// expected ULA_AND
initial
begin
	ULA_AND_expected = 1'bX;
end 

// expected ULA_NOT
initial
begin
	ULA_NOT_expected = 1'bX;
end 

// expected ULA_OR
initial
begin
	ULA_OR_expected = 1'bX;
end 

// expected ULA_Y
initial
begin
	ULA_Y_expected = 1'bX;
end 
// generate trigger
always @(S_expected or S or selULA_expected or selULA or ULA_ADD_expected or ULA_ADD or ULA_AND_expected or ULA_AND or ULA_NOT_expected or ULA_NOT or ULA_OR_expected or ULA_OR or ULA_Y_expected or ULA_Y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected S = %b | expected selULA = %b | expected ULA_ADD = %b | expected ULA_AND = %b | expected ULA_NOT = %b | expected ULA_OR = %b | expected ULA_Y = %b | ",S_expected_prev,selULA_expected_prev,ULA_ADD_expected_prev,ULA_AND_expected_prev,ULA_NOT_expected_prev,ULA_OR_expected_prev,ULA_Y_expected_prev);
	$display("| real S = %b | real selULA = %b | real ULA_ADD = %b | real ULA_AND = %b | real ULA_NOT = %b | real ULA_OR = %b | real ULA_Y = %b | ",S_prev,selULA_prev,ULA_ADD_prev,ULA_AND_prev,ULA_NOT_prev,ULA_OR_prev,ULA_Y_prev);
`endif
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( S_expected_prev[4] !== 1'bx ) && ( S_prev[4] !== S_expected_prev[4] )
		&& ((S_expected_prev[4] !== last_S_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[4] = S_expected_prev[4];
	end
	if (
		( S_expected_prev[5] !== 1'bx ) && ( S_prev[5] !== S_expected_prev[5] )
		&& ((S_expected_prev[5] !== last_S_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[5] = S_expected_prev[5];
	end
	if (
		( S_expected_prev[6] !== 1'bx ) && ( S_prev[6] !== S_expected_prev[6] )
		&& ((S_expected_prev[6] !== last_S_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[6] = S_expected_prev[6];
	end
	if (
		( S_expected_prev[7] !== 1'bx ) && ( S_prev[7] !== S_expected_prev[7] )
		&& ((S_expected_prev[7] !== last_S_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[7] = S_expected_prev[7];
	end
	if (
		( selULA_expected_prev[0] !== 1'bx ) && ( selULA_prev[0] !== selULA_expected_prev[0] )
		&& ((selULA_expected_prev[0] !== last_selULA_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selULA_expected_prev);
		$display ("     Real value = %b", selULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_selULA_exp[0] = selULA_expected_prev[0];
	end
	if (
		( selULA_expected_prev[1] !== 1'bx ) && ( selULA_prev[1] !== selULA_expected_prev[1] )
		&& ((selULA_expected_prev[1] !== last_selULA_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selULA_expected_prev);
		$display ("     Real value = %b", selULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_selULA_exp[1] = selULA_expected_prev[1];
	end
	if (
		( selULA_expected_prev[2] !== 1'bx ) && ( selULA_prev[2] !== selULA_expected_prev[2] )
		&& ((selULA_expected_prev[2] !== last_selULA_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selULA_expected_prev);
		$display ("     Real value = %b", selULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_selULA_exp[2] = selULA_expected_prev[2];
	end
	if (
		( ULA_ADD_expected_prev !== 1'bx ) && ( ULA_ADD_prev !== ULA_ADD_expected_prev )
		&& ((ULA_ADD_expected_prev !== last_ULA_ADD_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_ADD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_ADD_expected_prev);
		$display ("     Real value = %b", ULA_ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ULA_ADD_exp = ULA_ADD_expected_prev;
	end
	if (
		( ULA_AND_expected_prev !== 1'bx ) && ( ULA_AND_prev !== ULA_AND_expected_prev )
		&& ((ULA_AND_expected_prev !== last_ULA_AND_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_AND :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_AND_expected_prev);
		$display ("     Real value = %b", ULA_AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ULA_AND_exp = ULA_AND_expected_prev;
	end
	if (
		( ULA_NOT_expected_prev !== 1'bx ) && ( ULA_NOT_prev !== ULA_NOT_expected_prev )
		&& ((ULA_NOT_expected_prev !== last_ULA_NOT_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_NOT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_NOT_expected_prev);
		$display ("     Real value = %b", ULA_NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULA_NOT_exp = ULA_NOT_expected_prev;
	end
	if (
		( ULA_OR_expected_prev !== 1'bx ) && ( ULA_OR_prev !== ULA_OR_expected_prev )
		&& ((ULA_OR_expected_prev !== last_ULA_OR_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_OR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_OR_expected_prev);
		$display ("     Real value = %b", ULA_OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULA_OR_exp = ULA_OR_expected_prev;
	end
	if (
		( ULA_Y_expected_prev !== 1'bx ) && ( ULA_Y_prev !== ULA_Y_expected_prev )
		&& ((ULA_Y_expected_prev !== last_ULA_Y_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULA_Y :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULA_Y_expected_prev);
		$display ("     Real value = %b", ULA_Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ULA_Y_exp = ULA_Y_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Neander_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [7:0] S;
wire [2:0] selULA;
wire ULA_ADD;
wire ULA_AND;
wire ULA_NOT;
wire ULA_OR;
wire ULA_Y;

wire sampler;                             

// assign statements (if any)                          
Neander i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.reset(reset),
	.S(S),
	.selULA(selULA),
	.ULA_ADD(ULA_ADD),
	.ULA_AND(ULA_AND),
	.ULA_NOT(ULA_NOT),
	.ULA_OR(ULA_OR),
	.ULA_Y(ULA_Y)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2000 1'b1;
	#2000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

Neander_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

Neander_vlg_check_tst tb_out(
	.S(S),
	.selULA(selULA),
	.ULA_ADD(ULA_ADD),
	.ULA_AND(ULA_AND),
	.ULA_NOT(ULA_NOT),
	.ULA_OR(ULA_OR),
	.ULA_Y(ULA_Y),
	.sampler_rx(sampler)
);
endmodule

